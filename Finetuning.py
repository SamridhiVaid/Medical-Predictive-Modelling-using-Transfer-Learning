# -*- coding: utf-8 -*-
"""Fold5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LhBYNYwaAcRXvaFk0Hg1FygI9useD58G
"""

from numpy import array
from keras.preprocessing.text import one_hot
#from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers.core import Activation, Dropout, Dense
from keras.models import Model
from keras.preprocessing.text import Tokenizer
from keras.layers import Input
from keras.layers import Concatenate
from keras.layers import Bidirectional
from keras import optimizers
import pandas as pd
import numpy as np
import tensorflow as tf
import csv
import sys
import re
import pickle
import random
np.random.seed(1)
random.seed(1)
tf.random.set_seed(1)
import random
import scipy.stats
from scipy import spatial
import matplotlib.pyplot as plt
from keras.layers import LeakyReLU


#Training on cervical cancer dataset. This gives us the source model 

with open("ED_Large_G1_train_x.pickle", "rb") as fp:
    trainX = pickle.load(fp)

with open("ED_Large_G1_train_y.pickle", "rb") as fp:
    trainY = pickle.load(fp)

with open("20_PTB_Fold5_Test_X_normal.pickle", "rb") as fp:
    testX = pickle.load(fp)

with open("20_PTB_Fold5_Test_Y_normal.pickle", "rb") as fp:
    testY = pickle.load(fp)

print(trainX.shape)
print(testY.shape)
print(testX.shape)

trainX_reshape = np.reshape(trainX, (514, 46,1))
trainY_reshape = np.reshape(np.array(trainY), (514,1))
testX_reshape = np.reshape(testX, (8, 70,1))
testY_reshape = np.reshape(testY, (8,1))

print(testY_reshape.shape)

model = Sequential()
model.add(Bidirectional(LSTM(units = 512, return_sequences = True), input_shape = (46, 1)))
model.add(Dropout(0.2))
model.add(Bidirectional(LSTM(units = 512, return_sequences = True)))
model.add(Dropout(0.2))
model.add(Bidirectional(LSTM(units = 512, return_sequences = True)))
model.add(Dropout(0.2))
model.add(Bidirectional(LSTM(units = 512)))
model.add(Dropout(0.2))
model.add(Dense(units = 1))

callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=40)
RMSprop = tf.keras.optimizers.RMSprop(lr=0.0001, epsilon=None)
model.compile(optimizer = RMSprop, loss = 'mean_squared_error')
model.summary()
history = model.fit(trainX_reshape, trainY_reshape, epochs = 100, validation_split=0.1, verbose=1, batch_size = 30, callbacks=[callback])

filename = 'Ed_L_fold5_model_G1_weights' + '.h5'
model.save_weights(filename)
saved_model = pickle.dumps(model)
model.save('ED_L_fold5_model_G1.h5')


#Finetuning the source model on the non preterm birth dataset.

with open("60_NPTB_Fold5D_Train_X_normal.pickle", "rb") as fp:
    trainX = pickle.load(fp)

with open("60_NPTB_Fold5D_Train_Y_normal.pickle", "rb") as fp:
    trainY = pickle.load(fp)

with open("20_PTB_Fold5_Test_X_normal.pickle", "rb") as fp:
    testX = pickle.load(fp)

with open("20_PTB_Fold5_Test_Y_normal.pickle", "rb") as fp:
    testY = pickle.load(fp)

print(trainX.shape)
print(trainY.shape)
print(testY.shape)
print(testX.shape)

trainX_reshape = np.reshape(trainX, (55, 70,1))
trainY_reshape = np.reshape(np.array(trainY), (55,1))
testX_reshape = np.reshape(testX, (8, 70,1))
testY_reshape = np.reshape(testY, (8,1))

model = Sequential()
model.add(Bidirectional(LSTM(units = 512, return_sequences = True), input_shape = (70, 1)))
model.add(Dropout(0.2))
model.add(Bidirectional(LSTM(units = 512, return_sequences = True)))
model.add(Dropout(0.2))
model.add(Bidirectional(LSTM(units = 512, return_sequences = True)))
model.add(Dropout(0.2))
model.add(Bidirectional(LSTM(units = 512)))
model.add(Dropout(0.2))
model.add(Dense(units = 1))

RMSprop = tf.keras.optimizers.RMSprop(lr=0.0001, epsilon=None, decay=0.0)
model.compile(optimizer = RMSprop, loss = 'mean_squared_error')
model.load_weights('Ed_L_fold5_model_G1_weights.h5', by_name=True, skip_mismatch=True)
model.summary()
history = model.fit(trainX_reshape, trainY_reshape, epochs = 30, validation_split=0.1, verbose=1, batch_size = 3)
scores = model.evaluate(testX_reshape, testY_reshape, verbose=1)
print("MSE, MSE on test set:")
print(scores)


filename = 'Ed_L_fold5D_model_G2a_weights' + '.h5'
model.save_weights(filename)
saved_model2 = pickle.dumps(model)
model.save('Ed_L_fold5D_model_G2a.h5')


#Finetuning the model trained on non preterm birth dataset further on a combination of preterm birth and non preterm birth

with open("PTB_NPTB_Fold5D_Train_X_normal.pickle", "rb") as fp:
    trainX = pickle.load(fp)

with open("PTB_NPTB_Fold5D_Train_Y_normal.pickle", "rb") as fp:
    trainY = pickle.load(fp)

with open("20_PTB_Fold5_Test_X_normal.pickle", "rb") as fp:
    testX = pickle.load(fp)

with open("20_PTB_Fold5_Test_Y_normal.pickle", "rb") as fp:
    testY = pickle.load(fp)

print(trainX.shape)
print(testY.shape)
print(testX.shape)

trainX_reshape = np.reshape(trainX, (53, 70,1))
trainY_reshape = np.reshape(np.array(trainY), (53,1))
testX_reshape = np.reshape(testX, (8, 70,1))
testY_reshape = np.reshape(testY, (8,1))
# testY_reshape=b.transpose()

print(testY_reshape.shape)

model = Sequential()
model.add(LSTM(units = 512, return_sequences = True, input_shape = (70, 1)))
model.add(Dropout(0.2))
model.add(LSTM(units = 512, return_sequences = True))
model.add(Dropout(0.2))
model.add(LSTM(units = 512, return_sequences = True))
model.add(Dropout(0.2))
model.add(LSTM(units = 512))
model.add(Dropout(0.2))
model.add(Dense(units = 1))

#model_G2a_weights_normal
#callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=20)
RMSprop = tf.keras.optimizers.RMSprop(learning_rate=0.0001, epsilon=None)
model.compile(optimizer = RMSprop, loss = 'mean_squared_error')
model.load_weights('Ed_L_fold5D_model_G2a_weights.h5', by_name=True, skip_mismatch=True)
model.summary()
history = model.fit(trainX_reshape, trainY_reshape, epochs = 30, validation_split=0.2, verbose=1, batch_size = 1)
scores = model.evaluate(testX_reshape, testY_reshape, verbose=1)
print("MSE, MSE on test set:")
print(scores)


# serialize model to JSON
model_json = model.to_json()
with open("Ed_L_fold5D_model_G2b.json", "w") as json_file:
    json_file.write(model_json)
# serialize weights to HDF5
model.save_weights("Ed_L_fold5D_model_G2b_weights.h5")
print("Saved model to disk")




"""No finetuning Model"""

with open("PTB_NPTB_Fold5D_Train_X_normal.pickle", "rb") as fp:
    trainX = pickle.load(fp)

with open("PTB_NPTB_Fold5D_Train_Y_normal.pickle", "rb") as fp:
    trainY = pickle.load(fp)

with open("20_PTB_Fold5_Test_X_normal.pickle", "rb") as fp:
    testX = pickle.load(fp)

with open("20_PTB_Fold5_Test_Y_normal.pickle", "rb") as fp:
    testY = pickle.load(fp)

print(trainX.shape)
print(testY.shape)
print(testX.shape)

trainX_reshape = np.reshape(trainX, (53, 70,1))
trainY_reshape = np.reshape(np.array(trainY), (53,1))
testX_reshape = np.reshape(testX, (8, 70,1))
testY_reshape = np.reshape(testY, (8,1))
# testY_reshape=b.transpose()

print(testY_reshape.shape)

model = Sequential()
model.add(LSTM(units = 512, return_sequences = True, input_shape = (70, 1)))
model.add(Dropout(0.2))
model.add(LSTM(units = 512, return_sequences = True))
model.add(Dropout(0.2))
model.add(LSTM(units = 512, return_sequences = True))
model.add(Dropout(0.2))
model.add(LSTM(units = 512))
model.add(Dropout(0.2))
model.add(Dense(units = 1))

RMSprop = tf.keras.optimizers.RMSprop(learning_rate=0.0001, epsilon=None)
model.compile(optimizer = RMSprop, loss = 'mean_squared_error')
model.summary()
history = model.fit(trainX_reshape, trainY_reshape, epochs = 30, validation_split=0.2, verbose=1, batch_size = 1)
scores = model.evaluate(testX_reshape, testY_reshape, verbose=1)
print("MSE, MSE on test set:")
print(scores)


# serialize model to JSON
model_json = model.to_json()
with open("No_Ed_L_fold5D_model_G2b.json", "w") as json_file:
    json_file.write(model_json)
# serialize weights to HDF5
model.save_weights("No_Ed_L_fold5D_model_G2b_weights.h5")
print("Saved model to disk")